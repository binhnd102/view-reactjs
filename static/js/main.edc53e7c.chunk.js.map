{"version":3,"sources":["config.js","pages/login.js","App.js","serviceWorker.js","index.js"],"names":["firebase_api","axios","create","baseURL","login","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","loading","userData","email","state","password","post","then","response","localStorage","setItem","data","token","history","push","catch","error","errors","nextProps","UI","this","classes","Container","component","maxWidth","CssBaseline","className","paper","Avatar","avatar","Typography","variant","form","noValidate","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","helperText","onChange","type","Button","color","submit","onClick","disabled","CircularProgress","size","progess","Grid","container","item","Link","href","general","customError","Component","withStyles","theme","marginTop","spacing","display","flexDirection","alignItems","backgroundColor","palette","secondary","main","width","fontSize","position","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.edc53e7c.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const firebase_api = axios.create({\n\tbaseURL: 'https://us-central1-todoapp-df89c.cloudfunctions.net/api',\n  });","// login.js\n// Material UI components\nimport React, { Component } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Container from '@material-ui/core/Container';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {firebase_api} from '../config';\n\nconst styles = (theme) => ({\n\tpaper: {\n\t\tmarginTop: theme.spacing(8),\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center'\n\t},\n\tavatar: {\n\t\tmargin: theme.spacing(1),\n\t\tbackgroundColor: theme.palette.secondary.main\n\t},\n\tform: {\n\t\twidth: '100%',\n\t\tmarginTop: theme.spacing(1)\n\t},\n\tsubmit: {\n\t\tmargin: theme.spacing(3, 0, 2)\n\t},\n\tcustomError: {\n\t\tcolor: 'red',\n\t\tfontSize: '0.8rem',\n\t\tmarginTop: 10\n\t},\n\tprogess: {\n\t\tposition: 'absolute'\n\t}\n});\n\nclass login extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t\terrors: [],\n\t\t\tloading: false\n\t\t};\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tif (nextProps.UI.errors) {\n\t\t\tthis.setState({\n\t\t\t\terrors: nextProps.UI.errors\n\t\t\t});\n\t\t}\n\t}\n\n\thandleChange = (event) => {\n\t\tthis.setState({\n\t\t\t[event.target.name]: event.target.value\n\t\t});\n\t};\n\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.setState({ loading: true });\n\t\tconst userData = {\n\t\t\temail: this.state.email,\n\t\t\tpassword: this.state.password\n        };\n\t\tfirebase_api\n\t\t\t.post('/login', userData)\n            .then((response) => {\n\t\t\t\tlocalStorage.setItem('AuthToken', `Bearer ${response.data.token}`);\n\t\t\t\tthis.setState({ \n\t\t\t\t\tloading: false,\n\t\t\t\t});\t\t\n\t\t\t\tthis.props.history.push('/');\n\t\t\t})\n\t\t\t.catch((error) => {\t\t\t\t\n\t\t\t\tthis.setState({\n\t\t\t\t\terrors: error.response.data,\n\t\t\t\t\tloading: false\n\t\t\t\t});\n\t\t\t});\n\t};\n\n\trender() {\n\t\tconst { classes } = this.props;\n\t\tconst { errors, loading } = this.state;\n\t\treturn (\n\t\t\t<Container component=\"main\" maxWidth=\"xs\">\n\t\t\t\t<CssBaseline />\n\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t<Avatar className={classes.avatar}>\n\t\t\t\t\t\t<LockOutlinedIcon />\n\t\t\t\t\t</Avatar>\n\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<form className={classes.form} noValidate>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\t\tlabel=\"Email Address\"\n\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\tautoComplete=\"email\"\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\thelperText={errors.email}\n\t\t\t\t\t\t\terror={errors.email ? true : false}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\t\tautoComplete=\"current-password\"\n\t\t\t\t\t\t\thelperText={errors.password}\n\t\t\t\t\t\t\terror={errors.password ? true : false}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tclassName={classes.submit}\n\t\t\t\t\t\t\tonClick={this.handleSubmit}\n\t\t\t\t\t\t\tdisabled={loading || !this.state.email || !this.state.password}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSign In\n\t\t\t\t\t\t\t{loading && <CircularProgress size={30} className={classes.progess} />}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Grid container>\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<Link href=\"signup\" variant=\"body2\">\n\t\t\t\t\t\t\t\t\t{\"Don't have an account? Sign Up\"}\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t{errors.general && (\n\t\t\t\t\t\t\t<Typography variant=\"body2\" className={classes.customError}>\n\t\t\t\t\t\t\t\t{errors.general}\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default withStyles(styles)(login);\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport login from './pages/login';\n\nfunction App() {\n  return (\n    <Router>\n        <div>\n        <Switch>\n            <Route exact path=\"/login\" component={login}/>\n        </Switch>\n        </div>\n    </Router>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}